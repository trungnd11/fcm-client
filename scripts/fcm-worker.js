#!/usr/bin/env node

/* global process */

import { readFileSync, writeFileSync, existsSync, mkdirSync } from 'fs';
import { dirname } from 'path';

// C·∫•u h√¨nh Firebase m·∫∑c ƒë·ªãnh
const DEFAULT_FIREBASE_CONFIG = {
  apiKey: 'AIzaSyANUdxcxppINSZkayH4nGn4t-lOTg3B7N4',
  authDomain: 'my-landing-page-e7c7e.firebaseapp.com',
  projectId: 'my-landing-page-e7c7e',
  storageBucket: 'my-landing-page-e7c7e.firebasestorage.app',
  messagingSenderId: '999813447171',
  appId: '1:999813447171:web:4d47bb99b3fa66909a9836',
  measurementId: 'G-43J14KHN0W',
};

// Template cho service worker
const SERVICE_WORKER_TEMPLATE = `/* eslint-disable no-undef */
// Generated by fcm-worker script
importScripts(
  'https://www.gstatic.com/firebasejs/10.12.2/firebase-app-compat.js',
);
importScripts(
  'https://www.gstatic.com/firebasejs/10.12.2/firebase-messaging-compat.js',
);

console.log('[SW] Firebase messaging service worker starting...');

firebase.initializeApp({{FIREBASE_CONFIG}});

console.log('[SW] Firebase initialized');

const messaging = firebase.messaging();

console.log('[SW] Messaging instance created');

messaging.onBackgroundMessage(function (payload) {
  console.log(
    '[SW] Received background message:',
    payload,
  );
  
  const notificationTitle = payload.notification?.title || 'New Message';
  const notificationOptions = {
    body: payload.notification?.body || 'You have a new message',
    icon: '/firebase-logo.png',
    badge: '/firebase-logo.png',
    tag: 'fcm-notification',
    data: payload.data || {},
  };

  console.log('[SW] Showing notification:', notificationTitle, notificationOptions);

  // Hi·ªÉn th·ªã notification
  self.registration.showNotification(notificationTitle, notificationOptions);

  // G·ª≠i message qua BroadcastChannel
  if ('BroadcastChannel' in self) {
    const channel = new BroadcastChannel('fcm-notifications');
    channel.postMessage({
      type: 'FCM_BACKGROUND_NOTIFICATION',
      payload: {
        from: payload.from,
        messageId: payload.messageId,
        notification: payload.notification,
        collapseKey: payload.collapseKey,
      }
    });
    console.log('[SW] Message sent via BroadcastChannel');
  } else {
    // Fallback: s·ª≠ d·ª•ng postMessage
    self.clients.matchAll().then((clients) => {
      clients.forEach((client) => {
        client.postMessage({
          type: 'FCM_BACKGROUND_NOTIFICATION',
          payload: {
            from: payload.from,
            messageId: payload.messageId,
            notification: payload.notification,
            collapseKey: payload.collapseKey,
          }
        });
      });
    });
    console.log('[SW] Message sent via postMessage');
  }
});

console.log('[SW] Background message handler registered');
`;

function showHelp() {
  console.log(`
FCM Service Worker Manager

Usage: node scripts/fcm-worker.js <command> [options]

Commands:
  generate [output]     Generate service worker file
  validate              Validate existing service worker
  update-config         Update Firebase configuration
  help                  Show this help message

Options:
  --config <file>       Path to Firebase config file (JSON)
  --output <path>       Output path for generated service worker

Examples:
  node scripts/fcm-worker.js generate
  node scripts/fcm-worker.js generate --output ./public/sw.js
  node scripts/fcm-worker.js validate
  node scripts/fcm-worker.js update-config --config ./firebase-config.json
`);
}

function loadFirebaseConfig(configPath) {
  if (!configPath) {
    return DEFAULT_FIREBASE_CONFIG;
  }

  try {
    if (!existsSync(configPath)) {
      console.error(`‚ùå Config file not found: ${configPath}`);
      process.exit(1);
    }
    
    const configContent = readFileSync(configPath, 'utf8');
    return JSON.parse(configContent);
  } catch (error) {
    console.error(`‚ùå Error loading config file: ${error.message}`);
    process.exit(1);
  }
}

function generateServiceWorker(config, outputPath = './public/firebase-messaging-sw.js') {
  try {
    // ƒê·∫£m b·∫£o outputPath l√† string
    if (!outputPath || typeof outputPath !== 'string') {
      outputPath = './public/firebase-messaging-sw.js';
    }
    
    // ƒê·∫£m b·∫£o th∆∞ m·ª•c output t·ªìn t·∫°i
    const outputDir = dirname(outputPath);
    if (!existsSync(outputDir)) {
      mkdirSync(outputDir, { recursive: true });
    }

    // T·∫°o service worker content
    const serviceWorkerContent = SERVICE_WORKER_TEMPLATE.replace(
      '{{FIREBASE_CONFIG}}',
      JSON.stringify(config, null, 2)
    );

    // Ghi file
    writeFileSync(outputPath, serviceWorkerContent, 'utf8');
    
    console.log(`‚úÖ Service worker generated successfully: ${outputPath}`);
    console.log(`üìã Firebase config used:`);
    console.log(JSON.stringify(config, null, 2));
    
    // Th√™m th√¥ng tin khi ƒë∆∞·ª£c c√†i ƒë·∫∑t nh∆∞ dependency
    if (process.env.FCM_RSLIB_INSTALLED) {
      console.log(`\nüì¶ This service worker was generated by fcm-rslib package`);
      console.log(`üîó Package: https://github.com/your-repo/fcm-rslib`);
    }
    
  } catch (error) {
    console.error(`‚ùå Error generating service worker: ${error.message}`);
    process.exit(1);
  }
}

function validateServiceWorker(swPath = './public/firebase-messaging-sw.js') {
  try {
    // ƒê·∫£m b·∫£o swPath l√† string
    if (!swPath || typeof swPath !== 'string') {
      swPath = './public/firebase-messaging-sw.js';
    }
    
    if (!existsSync(swPath)) {
      console.error(`‚ùå Service worker not found: ${swPath}`);
      process.exit(1);
    }

    const content = readFileSync(swPath, 'utf8');
    
    // Ki·ªÉm tra c√°c th√†nh ph·∫ßn c·∫ßn thi·∫øt
    const checks = [
      { name: 'Firebase App Import', pattern: /firebase-app-compat\.js/ },
      { name: 'Firebase Messaging Import', pattern: /firebase-messaging-compat\.js/ },
      { name: 'Firebase Initialize', pattern: /firebase\.initializeApp/ },
      { name: 'Messaging Instance', pattern: /firebase\.messaging/ },
      { name: 'Background Message Handler', pattern: /onBackgroundMessage/ },
      { name: 'Show Notification', pattern: /showNotification/ },
    ];

    console.log(`üîç Validating service worker: ${swPath}`);
    
    let allValid = true;
    checks.forEach(check => {
      if (check.pattern.test(content)) {
        console.log(`‚úÖ ${check.name}`);
      } else {
        console.log(`‚ùå ${check.name} - Missing`);
        allValid = false;
      }
    });

    if (allValid) {
      console.log(`\n‚úÖ Service worker validation passed!`);
    } else {
      console.log(`\n‚ùå Service worker validation failed!`);
      process.exit(1);
    }

  } catch (error) {
    console.error(`‚ùå Error validating service worker: ${error.message}`);
    process.exit(1);
  }
}

function updateConfig(configPath) {
  try {
    const config = loadFirebaseConfig(configPath);
    
    // T·∫°o file config m·∫´u n·∫øu ch∆∞a c√≥
    if (!configPath) {
      configPath = './firebase-config.json';
    }
    
    if (!existsSync(configPath)) {
      writeFileSync(configPath, JSON.stringify(DEFAULT_FIREBASE_CONFIG, null, 2), 'utf8');
      console.log(`‚úÖ Created config file: ${configPath}`);
    } else {
      console.log(`‚úÖ Config file already exists: ${configPath}`);
    }
    
    console.log(`üìã Current Firebase configuration:`);
    console.log(JSON.stringify(config, null, 2));
    
  } catch (error) {
    console.error(`‚ùå Error updating config: ${error.message}`);
    process.exit(1);
  }
}

// Main execution
function main() {
  const args = process.argv.slice(2);
  const command = args[0];

  if (!command || command === 'help') {
    showHelp();
    return;
  }

  // Parse options
  let configPath = null;
  let outputPath = null;
  
  for (let i = 1; i < args.length; i++) {
    if (args[i] === '--config' && i + 1 < args.length) {
      configPath = args[i + 1];
      i++;
    } else if (args[i] === '--output' && i + 1 < args.length) {
      outputPath = args[i + 1];
      i++;
    }
  }

  // Debug logging
  if (process.env.DEBUG) {
    console.log('üîç Debug info:');
    console.log('  Command:', command);
    console.log('  Config path:', configPath);
    console.log('  Output path:', outputPath);
    console.log('  Current directory:', process.cwd());
  }

  switch (command) {
    case 'generate': {
      const config = loadFirebaseConfig(configPath);
      generateServiceWorker(config, outputPath);
      break;
    }
      
    case 'validate':
      validateServiceWorker(outputPath);
      break;
      
    case 'update-config':
      updateConfig(configPath);
      break;
      
    default:
      console.error(`‚ùå Unknown command: ${command}`);
      showHelp();
      process.exit(1);
  }
}

// Run if this file is executed directly
if (import.meta.url === `file://${process.argv[1]}`) {
  main();
} 